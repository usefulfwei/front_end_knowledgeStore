/**
 * Created by jwdn on 2016/11/4.
 */
// React是基础框架，是一套基础设计实现理念，开发者不能直接使用它来开发移动应用或者网页。
// 在它之上发展出了React.js框架用来开发网页，发展出来React Native用来开发移动应用。
// 因为React基础框架与React.js框架是同时出现，同时进化发展，这造成了React基础框架的基本概念，
// 设计思想都是在React.js的相关文档中描述。后来，Facebook推出React Native后，
// 也没有把React相关的概念文档从React.js文档中分离出来。这就造成了学React Native要去看React.js文档，
// 说React Native不时会说到React.js的情况。如果开发者只想关注移动应用开发，
// 那么在React.js的如何开发网页的文档中整理出来React基础框架知识是件不轻松的活儿。


// React强迫我们把我们的应用划分成多个互不相关的组件，
// 每个组件作为一个独立的视图。这使得我们更容易迭代我们的产品，
// 因为我们不用在改动一小部分的时候把整个系统都装在我们脑子里。最重要的是，
// React包装了复杂而易变的DOM API，改为提供一个声明式的结构，使得整个程序模型变得抽象而简单。
// 我们发现当我们使用React来构建网页时，我们的代码变得十分可预测。
// 这种可预测性使得我们在快速的迭代产品时更多的信任已有的代码，最终我们的应用程序也变得更为可靠。
// 更进一步，不仅仅扩大我们的应用规模变得更容易了，我们的团队规模也更容易进行调整。


// 引入React Native
//
// 因为React组件本来就被设计为一个纯粹的、无副作用的函数，函数返回每一个时刻当时的View状态，
// 这样我们无需读取底层View的状态就可以为它写入新的状态。在浏览器环境里，React使用一个非阻塞的方式来维护DOM，
// 但React最棒的地方在于它其实可以构成一个抽象的概念，而不是死死的绑定在DOM上。
// React可以绑定到任何必要的视图系统上，譬如iOS的UIKit等等。
//
// 这意味着我们只要很少的工作就可以用Github上已有的React来构建真正原生的移动应用。
// 移动环境唯一的区别在于不同浏览器里的React用div和span标签来渲染，我们用一个植入的JavasScriptCore来运行JavaScript，
// 然后渲染平台独有的组件。
//
// 这个方案带来的一个巨大好处在于我们可以逐步的进行方案替换。
// 我们既可以在新项目中直接基于React构建，也可以在旧项目的合适部分中去尝试性的使用它。
// 正如我们刚开始在Facebook.com中使用React也仅仅是在某些地方，
// 我们也没必要为了React的好处而把所有Facebook的所有应用重写一遍。

// 基本上你可以把 React Native 看作是 React.js 在移动上的应用。
// 现在的大部分 React Native 教程，包括官方文档，基本上是写给有 React 经验的人看的。
// React 的一些基本概念和应用，比如 Lifecycle、JSX 还是要先学习一下。
//
// 其实 React 就是 React，你学会了 React，差不多也就等于会了 React Native。
//
// 正确的理解应该是你学会 React，然后去了解一下 React Native 的 API